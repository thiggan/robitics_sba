---
interface Props {
  title: string;
  body: string;
  href: string;
}

const { href, title, body } = Astro.props;
---

<div
  id="myMap"
  style="position:relative;width:100%;min-width:290px;height:600px;background-color:grey"
>
</div>

<div>
  <button onclick="
  addMorePins()
  ">random pins</button>
</div>

<div>
  <button onclick="
  addPinsFromService()
  ">pin from service</button>
</div>

<div>
  <button onclick="
  addPinsFromService_automatically()
  ">auto</button>
</div>
<div>
  <button onclick="
  addPinsFromService_automatically_clear()
  ">auto - stop</button>
</div>

<script is:inline>
var map, infobox, tooltip;
var tooltipTemplate =
  '<div style="background-color:white;height:20px;width:150px;padding:5px;text-align:center"><b>{title}</b></div>';

function GetMap() {
  map = new Microsoft.Maps.Map("#myMap", {});

  //Create an infobox to use as a tooltip when hovering.
  tooltip = new Microsoft.Maps.Infobox(map.getCenter(), {
    visible: false,
    showPointer: false,
    showCloseButton: false,
    offset: new Microsoft.Maps.Point(-75, 10),
  });

  tooltip.setMap(map);

  //Create an infobox for displaying detailed information.
  infobox = new Microsoft.Maps.Infobox(map.getCenter(), {
    visible: false,
  });

  infobox.setMap(map);

  //Create random locations in the map bounds.
  var randomLocations = Microsoft.Maps.TestDataGenerator.getLocations(
    5,
    map.getBounds()
  );

  for (var i = 0; i < randomLocations.length; i++) {
    var pin = new Microsoft.Maps.Pushpin(randomLocations[i]);

    //Store some metadata with the pushpin.
    pin.metadata = {
      title: "Pushpin " + i,
      description: "Discription for pin " + i,
    };

    //Add a mouse events to the pushpin.
    Microsoft.Maps.Events.addHandler(pin, "click", pushpinClicked);
    Microsoft.Maps.Events.addHandler(pin, "mouseover", pushpinHovered);
    Microsoft.Maps.Events.addHandler(pin, "mouseout", closeTooltip);

    //Add pushpin to the map.
    map.entities.push(pin);
  }
}

function pushpinClicked(e) {
  //Hide the tooltip
  closeTooltip();

  //Make sure the infobox has metadata to display.
  if (e.target.metadata) {
    //Set the infobox options with the metadata of the pushpin.
    infobox.setOptions({
      location: e.target.getLocation(),
      title: e.target.metadata.title,
      description: e.target.metadata.description,
      visible: true,
    });
  }
}

function pushpinHovered(e) {
  //Hide the infobox
  infobox.setOptions({ visible: false });

  //Make sure the infobox has metadata to display.
  if (e.target.metadata) {
    //Set the infobox options with the metadata of the pushpin.
    tooltip.setOptions({
      location: e.target.getLocation(),
      htmlContent: tooltipTemplate.replace(
        "{title}",
        e.target.metadata.title
      ),
      visible: true,
    });
  }
}

function closeTooltip() {
  //Close the tooltip and clear its content.
  tooltip.setOptions({
    visible: false,
  });
}

function addMorePins() {
  var randomLocations = Microsoft.Maps.TestDataGenerator.getLocations(
    5,
    map.getBounds()
  );
  for (var i = 0; i < randomLocations.length; i++) {
    var pin = new Microsoft.Maps.Pushpin(randomLocations[i]);

    //Store some metadata with the pushpin.
    pin.metadata = {
      title: "Pushpin " + i,
      description: "Discription for pin " + i,
    };

    //Add a mouse events to the pushpin.
    Microsoft.Maps.Events.addHandler(pin, "click", pushpinClicked);
    Microsoft.Maps.Events.addHandler(pin, "mouseover", pushpinHovered);
    Microsoft.Maps.Events.addHandler(pin, "mouseout", closeTooltip);

    //Add pushpin to the map.
    map.entities.push(pin);
  }
}

let intervalId = 0;
async function addPinsFromService_automatically()
{
  intervalId = setInterval(async () => {
      await addPinsFromService();
    }, 1000);
}
async function addPinsFromService_automatically_clear()
{
  clearInterval(intervalId);
}

async function addPinsFromService() {
  let blob = await fetch("https://localhost:7009/api/gps")
    .then((r) => r.json())
    .then((key) => {
      return key;
    });
  console.log(blob);

  if(blob.message === "fix") {
    var loc = new Microsoft.Maps.Location(
    blob.latitude,
    blob.longitude
  );

  //Add a pushpin at the user's location.
  var pin = new Microsoft.Maps.Pushpin(loc);
  map.entities.push(pin);

  //Center the map on the user's location.
  map.setView({ center: loc, zoom: 8 });
  } else {
    console.log("unable to generate pin because see log", blob);
  }

}

// Dynamic load the Bing Maps Key and Script
// Get your own Bing Maps key at https://www.microsoft.com/maps
(async () => {
  let script = document.createElement("script");
  // let bingKey = await fetch("https://samples.azuremaps.com/api/GetBingMapsKey").then(r => r.text()).then(key => { return key });
  let bingKey =
    "AlSz6qB5P0wkOEbDNlU50syIell6SkrlK3Nl_J4sSjJzuKzFz74PYx8csd26zmj0";
  script.setAttribute(
    "src",
    `https://www.bing.com/api/maps/mapcontrol?callback=GetMap&key=${bingKey}`
  );
    document.body.appendChild(script);
  })();
</script>
