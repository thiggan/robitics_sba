---
interface Props {
  title: string;
  body: string;
  href: string;
}

const { href, title, body } = Astro.props;
---

<div id="myData">
  <table id="table-header">
    <thead>
      <tr>
        <th>Message</th>
        <th>Latitude</th>
        <th>Longitude</th>
        <th>Altitude</th>
        <th>Speed</th>
        <th>Angle</th>
        <th>Satellites</th>
        <!-- <th>Fix Type</th> -->
        <!-- <th>Timestamp</th> -->
      </tr>
    </thead>
    <tbody id="table-data">
      <!-- Data will be added here dynamically -->
    </tbody>
  </table>
</div>

<div>
  <button onclick="
  getGpsData()
  ">log from service</button>
</div>

<div>
  <button onclick="
  addLogsFromService_automatically()
  ">auto</button>
</div>
<div>
  <button onclick="
  addLogsFromService_automatically_clear()
  "
    >auto - stop</button
  >
</div>

<style>
  /* Style for the table */
  #table-header {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
  }

  /* Style for table header */
  #table-header th {
    background-color: #f2f2f2;
    font-weight: bold;
    text-align: center;
    padding: 10px;
    border: 1px solid #ccc;
  }

  #table-data {
    background-color: black;
    color: white;
    text-align: center;
  }

  #table-data:hover {
    background-color: gray;
  }
</style>

<script is:inline>
  async function getGpsData() {
    let data = await fetch("https://localhost:7009/api/gps")
      .then((r) => r.json())
      .then((key) => {
        return key;
      });
    console.log(data);

    var tableBody = document.getElementById("table-data");
    var row = tableBody.insertRow();

    row.insertCell().textContent = data.message;
    // Populate cells with JSON data
    row.insertCell().textContent = formatNumber(data.latitude);
    row.insertCell().textContent = formatNumber(data.longitude);
    row.insertCell().textContent = data.altitude;
    row.insertCell().textContent = data.speed;
    row.insertCell().textContent = data.angle;
    row.insertCell().textContent = data.satellites;
    // row.insertCell().textContent = data.fixType;
    // row.insertCell().textContent = data.timestamp.toLocaleString('EN-NZ', { timeZone: 'UTC' });
    // row.insertCell().textContent = new Intl.DateTimeFormat("default", options).format(data.timeStamp);

    // if(tableBody.rows.length > 10)
    var table = document.getElementById("table-header");
    if(table.tBodies[0].rows.length > 8)
    {
      table.deleteRow(1);
    }
  }

  function formatNumber(x) {
    return Number.parseFloat(x).toFixed(5);
  }

  let logger_intervalId = 0;
  async function addLogsFromService_automatically() {
    logger_intervalId = setInterval(async () => {
      await getGpsData();
    }, 1000);
  }
  async function addLogsFromService_automatically_clear() {
    clearInterval(logger_intervalId);
  }
</script>
